/*
 * Copyright (c) 2015, Bosch Software Innovations GmbH, Germany All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 * disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Bosch Software Innovations GmbH, Germany nor the names of its contributors may be used to
 * endorse or promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.bosch.cr.examples.rest;

import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.Signature;
import java.util.Base64;

/**
 * A factory for signing arbitrary data with the {@value #SIGNATURE_ALGORITHM} algorithm.
 *
 * @since 1.0.0
 */
public final class SignatureFactory
{

   /**
    * The algorithm used to generate the key pair.
    */
   public static final String KEY_ALGORITHM = "EC";

   /**
    * The algorithm used to sign.
    */
   public static final String SIGNATURE_ALGORITHM = "SHA256withECDSA";

   private final KeyPair keyPair;

   /**
    * Constructs a new {@code SignatureFactory}.
    */
   private SignatureFactory()
   {
      try
      {
         final KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(KEY_ALGORITHM);
         this.keyPair = keyPairGenerator.generateKeyPair();
      }
      catch (final NoSuchAlgorithmException e)
      {
         throw new RuntimeException(e.getCause());
      }
   }

   /**
    * Returns a {@code SignatureFactory} instance.
    * <p>
    * Upon creation, a new public and private key pair will be generated by the factory.
    * </p>
    * 
    * @return a SignatureFactory instance.
    */
   public static SignatureFactory newInstance()
   {
      return new SignatureFactory();
   }

   /**
    * Returns the {@code PublicKey} of this factory in PKCS8 format.
    *
    * @return the PublicKey.
    */
   public String getPublicKey()
   {
      final byte[] base64EncodedKey = Base64.getEncoder().encode(keyPair.getPublic().getEncoded());
      return "-----BEGIN PUBLIC KEY-----" + new String(base64EncodedKey) + "-----END PUBLIC KEY-----";
   }

   /**
    * Signs the given {@code data} with {@value #SIGNATURE_ALGORITHM}.
    *
    * @param data the data to sign.
    * @return the signed data.
    */
   public String sign(final String data)
   {
      try
      {
         final Signature ecdsa = Signature.getInstance(SIGNATURE_ALGORITHM);
         ecdsa.initSign(keyPair.getPrivate());
         ecdsa.update(data.getBytes());

         final byte[] signature = ecdsa.sign();
         final byte[] signatureEncoded = Base64.getEncoder().encode(signature);

         return new String(signatureEncoded);
      }
      catch (final Exception e)
      {
         throw new RuntimeException(e.getCause());
      }
   }
}
