/*
 *                                            Bosch SI Example Code License
 *                                              Version 1.0, January 2016
 *
 * Copyright 2016 Bosch Software Innovations GmbH ("Bosch SI"). All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 * disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * BOSCH SI PROVIDES THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO
 * THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF 
 * ALL NECESSARY SERVICING, REPAIR OR CORRECTION. THIS SHALL NOT APPLY TO MATERIAL DEFECTS AND DEFECTS OF TITLE WHICH 
 * BOSCH SI HAS FRAUDULENTLY CONCEALED. APART FROM THE CASES STIPULATED ABOVE, BOSCH SI SHALL BE LIABLE WITHOUT
 * LIMITATION FOR INTENT OR GROSS NEGLIGENCE, FOR INJURIES TO LIFE, BODY OR HEALTH AND ACCORDING TO THE PROVISIONS OF
 * THE GERMAN PRODUCT LIABILITY ACT (PRODUKTHAFTUNGSGESETZ). THE SCOPE OF A GUARANTEE GRANTED BY BOSCH SI SHALL REMAIN
 * UNAFFECTED BY LIMITATIONS OF LIABILITY. IN ALL OTHER CASES, LIABILITY OF BOSCH SI IS EXCLUDED. THESE LIMITATIONS OF 
 * LIABILITY ALSO APPLY IN REGARD TO THE FAULT OF VICARIOUS AGENTS OF BOSCH SI AND THE PERSONAL LIABILITY OF BOSCH SI'S
 * EMPLOYEES, REPRESENTATIVES AND ORGANS.
 */
package com.bosch.cr.examples.rest;

import java.io.FileInputStream;
import java.io.IOException;
import java.net.URI;
import java.nio.file.Paths;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.UnrecoverableKeyException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;

/**
 * A factory for signing arbitrary data with the {@value #SIGNATURE_ALGORITHM} algorithm.
 *
 * @since 1.0.0
 */
public final class SignatureFactory
{

   /**
    * The algorithm used to generate the key pair.
    */
   public static final String KEY_ALGORITHM = "EC";

   /**
    * The algorithm used to sign.
    */
   public static final String SIGNATURE_ALGORITHM = "SHA256withECDSA";

   private final PrivateKey privateKey;
   private final String publicKeyString;

   private SignatureFactory()
   {
      try
      {
         final KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(KEY_ALGORITHM);
         final KeyPair keyPair = keyPairGenerator.generateKeyPair();
         privateKey = keyPair.getPrivate();
         publicKeyString = createPublicKeyString(keyPair.getPublic());
      }
      catch (final NoSuchAlgorithmException e)
      {
         throw new RuntimeException(e.getCause());
      }
   }

   private SignatureFactory(final PrivateKey privateKey, final String publicKeyString)
   {
      this.privateKey = privateKey;
      this.publicKeyString = publicKeyString;
   }

   /**
    * Returns a {@code SignatureFactory} instance.
    * <p>
    * Upon creation, a new public and private key pair will be generated by the factory.
    * </p>
    *
    * @return a SignatureFactory instance.
    */
   public static SignatureFactory newInstance()
   {
      return new SignatureFactory();
   }

   /**
    * Returns a {@code SignatureFactory} instance for a given private and public key.
    *
    * @param privateKeyString the private key to use in format {@code -----BEGIN PRIVATE KEY-----...}
    * @param publicKeyString the public key to use in format {@code -----BEGIN PUBLIC KEY-----...} or {@code -----BEGIN CERTIFICATE-----...}
    * @return a SignatureFactory instance.
    */
   public static SignatureFactory newInstance(final String privateKeyString, final String publicKeyString)
   {
      return new SignatureFactory(createPrivateKeyFor(privateKeyString), publicKeyString);
   }

   /**
    * Returns a {@code SignatureFactory} instance for a given keystore location.
    *
    * @param keystoreUri the keystore location as URI.
    * @param keyStorePassword the keystore's password.
    * @param keyAlias the key's alias.
    * @param keyAliasPassword the key alias' password.
    * @return a SignatureFactory instance.
    */
   public static SignatureFactory newInstance(final URI keystoreUri, final String keyStorePassword,
      final String keyAlias, final String keyAliasPassword)
   {
      try
      {
         final FileInputStream inputStream = new FileInputStream(Paths.get(keystoreUri).toFile());
         final KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
         keystore.load(inputStream, keyStorePassword.toCharArray());
         final Key key = keystore.getKey(keyAlias, keyAliasPassword.toCharArray());
         if (key instanceof PrivateKey)
         {
            // Get certificate of public key
            final Certificate cert = keystore.getCertificate(keyAlias);

            // Get public key
            final PublicKey publicKey = cert.getPublicKey();
            return new SignatureFactory((PrivateKey) key, createPublicKeyString(publicKey));
         }
         else
         {
            throw new IllegalStateException("Retrieved key was not a private key");
         }
      }
      catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | UnrecoverableKeyException e)
      {
         throw new IllegalStateException("Could not load private/public keypair from keystore", e);
      }
   }

   private static PrivateKey createPrivateKeyFor(final String privateKey)
   {
      try
      {
         String privateKeyPEM = privateKey.replace("\n", "");
         privateKeyPEM = privateKeyPEM.replace("-----BEGIN PRIVATE KEY-----", "");
         privateKeyPEM = privateKeyPEM.replace("-----END PRIVATE KEY-----", "");
         final byte[] decodedBytes = Base64.getDecoder().decode(privateKeyPEM);
         final PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(decodedBytes);
         final KeyFactory keyFactory = KeyFactory.getInstance("EC");
         return keyFactory.generatePrivate(keySpec);
      }
      catch (final Exception e)
      {
         throw new RuntimeException(e.getCause());
      }
   }

   private static String createPublicKeyString(final PublicKey publicKey)
   {
      final byte[] base64EncodedKey = Base64.getEncoder().encode(publicKey.getEncoded());
      return "-----BEGIN PUBLIC KEY-----" + new String(base64EncodedKey) + "-----END PUBLIC KEY-----";
   }

   /**
    * Returns the {@code PublicKey} of this factory in String format.
    *
    * @return the PublicKey.
    */
   public String getPublicKeyString()
   {
      return publicKeyString;
   }

   /**
    * Signs the given {@code data} with {@value #SIGNATURE_ALGORITHM}.
    *
    * @param data the data to sign.
    * @return the signed data.
    */
   public String sign(final String data)
   {
      try
      {
         final Signature ecdsa = Signature.getInstance(SIGNATURE_ALGORITHM);
         ecdsa.initSign(privateKey);
         ecdsa.update(data.getBytes());

         final byte[] signature = ecdsa.sign();
         final byte[] signatureEncoded = Base64.getEncoder().encode(signature);

         return new String(signatureEncoded);
      }
      catch (final Exception e)
      {
         throw new RuntimeException(e.getCause());
      }
   }
}
